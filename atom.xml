<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bemzhao.github.io</id>
    <title>白日梦制造商</title>
    <updated>2021-08-25T05:26:11.861Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bemzhao.github.io"/>
    <link rel="self" href="https://bemzhao.github.io/atom.xml"/>
    <subtitle>面包会有的，牛奶会有的，一切都会有的</subtitle>
    <logo>https://bemzhao.github.io/images/avatar.png</logo>
    <icon>https://bemzhao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 白日梦制造商</rights>
    <entry>
        <title type="html"><![CDATA[常见问题]]></title>
        <id>https://bemzhao.github.io/post/8GKAgoJhK/</id>
        <link href="https://bemzhao.github.io/post/8GKAgoJhK/">
        </link>
        <updated>2021-08-24T13:12:37.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="v-model-原理">v-model 原理</h3>
<p>通过 v-bind 绑定 value 属性，v-on 监听触发 input 事件并传递数据，其底层是通过Object.defineProperty() 来劫持各个属性的 setter，getter，达到监听数据变动的目的。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="v-model-原理">v-model 原理</h3>
<p>通过 v-bind 绑定 value 属性，v-on 监听触发 input 事件并传递数据，其底层是通过Object.defineProperty() 来劫持各个属性的 setter，getter，达到监听数据变动的目的。</p>
<!-- more -->
<h3 id="nexttick-使用场景和原理">nextTick 使用场景和原理</h3>
<p>nextTick 中的回调是在下次 DOM 更新循环结束之后执行的延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。主要思路就是采用微任务优先的方式调用异步方法去执行 nextTick 包装的方法</p>
<h3 id="实现双向绑定的方法">实现双向绑定的方法</h3>
<p>① v-model<br>
② .sync 修饰符</p>
<pre><code>&lt;my-dialog :visible.sync=&quot;dialogVisible&quot; /&gt;

&lt;my-dialog
    :visible=&quot;dialogVisible&quot;
    @update:visible=&quot;newVisible =&gt; (dialogVisible = newVisible)&quot;
/&gt;

// my-dialog 组件在 visible 变化时 this.$emit('update:visible', newVisible) 即可。
</code></pre>
<p>③ model 属性，定制 prop 和 event<br>
④ vue-better-sync 插件</p>
<h3 id="vue-router-路由模式有几种">vue-router 路由模式有几种？</h3>
<p>① hash、② history、③ abstract</p>
<p>浏览器下默认为 hash 模式<br>
history 模式依赖 HTML5 History API 和服务器配置，主要利用了 history.pushState() 和 history.repalceState() 两个API<br>
abstract: 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式。</p>
<h3 id="导航守卫">导航守卫</h3>
<p>全局前置守卫：router.beforeEach((to, from, next) =&gt; {})<br>
全局后置钩子：router.afterEach((to, from) =&gt; {})<br>
路由独享的守卫：beforeEnter: (to, from, next) =&gt; {}<br>
组件内的守卫：<br>
①beforeRouteEnter(to, from, next) {}<br>
　不能获取组件实例 <code>this</code>，因为当守卫执行前，组件实例还没被创建，但是可以通过传一个回调给 next 来访问组件实例<br>
②beforeRouteUpdate(to, from, next) {}<br>
③beforeRouteLeave(to, from, next) {}</p>
<h3 id="vue-组件间通信有哪几种方式">Vue 组件间通信有哪几种方式？</h3>
<p>① props / <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mi>m</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">适</mi><mi mathvariant="normal">用</mi><mi mathvariant="normal">父</mi><mi mathvariant="normal">子</mi><mi mathvariant="normal">组</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">通</mi><mi mathvariant="normal">信</mi><mi mathvariant="normal">②</mi><mi>E</mi><mi>v</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>B</mi><mi>u</mi><mi>s</mi><mi mathvariant="normal">（</mi></mrow><annotation encoding="application/x-tex">emit 适用 父子组件通信
② EventBus （</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">适</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">父</span><span class="mord cjk_fallback">子</span><span class="mord cjk_fallback">组</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">信</span><span class="mord">②</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">u</span><span class="mord mathdefault">s</span><span class="mord cjk_fallback">（</span></span></span></span>emit / $on） 适用于 父子、隔代、兄弟组件通信<br>
③ provide / inject 适用于 隔代组件通信<br>
④ Vuex 适用于 父子、隔代、兄弟组件通信</p>
<h3 id="computed-和-watch-的区别和运用的场景">computed 和 watch 的区别和运用的场景？</h3>
<p>computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；<br>
场景：购物车结算</p>
<p>watch： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；<br>
场景：搜索框展示结果</p>
<h3 id="有哪些-vue-的性能优化">有哪些 Vue 的性能优化</h3>
<ul>
<li>对象层级不要过深，否则性能就会差</li>
<li>不需要响应式的数据不要放到 data 中（可以用 Object.freeze() 冻结数据）</li>
<li>v-if 和 v-show 区分使用场景</li>
<li>computed 和 watch 区分使用场景</li>
<li>v-for 遍历必须加 key，key 最好是 id 值，且避免同时使用 v-if</li>
<li>大数据列表和表格性能优化-虚拟列表/虚拟表格</li>
<li>防止内部泄漏，组件销毁后把全局变量和事件销毁</li>
<li>图片懒加载</li>
<li>路由懒加载</li>
<li>第三方插件的按需引入</li>
<li>适当采用 keep-alive 缓存组件</li>
<li>防抖、节流运用</li>
<li>服务端渲染 SSR or 预渲染</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于 Gridea 接入 Valine 评论系统]]></title>
        <id>https://bemzhao.github.io/post/bzDWCkPw1/</id>
        <link href="https://bemzhao.github.io/post/bzDWCkPw1/">
        </link>
        <updated>2021-03-12T15:43:17.000Z</updated>
        <summary type="html"><![CDATA[<p>Valine：<a href="https://valine.js.org/" target="_blank">https://valine.js.org/</a><br>
Leancloud：<a href="https://console.leancloud.cn/apps" target="_blank">https://console.leancloud.cn/apps</a></p>
<p>作为一款无后端评论系统，接入的教程 Valine 官网上很简单，其他博客都写烂了，记录一下遇到的问题</p>
]]></summary>
        <content type="html"><![CDATA[<p>Valine：<a href="https://valine.js.org/" target="_blank">https://valine.js.org/</a><br>
Leancloud：<a href="https://console.leancloud.cn/apps" target="_blank">https://console.leancloud.cn/apps</a></p>
<p>作为一款无后端评论系统，接入的教程 Valine 官网上很简单，其他博客都写烂了，记录一下遇到的问题</p>
<!-- more -->
<br />
<br />
<br />
<p>我使用的是 simple 的主题模板，里面引入了 Vue 框架，Valine 里关于评论的元素是通过给予一个容器</p>
<pre><code class="language-html">&lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;
</code></pre>
<p>然后再通过初始化对象动态生成输入框等其他元素的</p>
<pre><code class="language-js">new Valine({
    el: '#vcomments',
    appId: 'Your appId',
    appKey: 'Your appKey'
})

</code></pre>
<p>如果按照官网的示例初始化是没有效果的，表情和提交评论都无效了</p>
<br />
<br />
<p>所以需要在 Vue 初始化之后，Dom 更新完成了再进行 Valine 的初始化</p>
<pre><code class="language-js">var app = new Vue({
    el: '#app',
    data: {
        menuVisible: false,
    },
});

app.$nextTick(() =&gt; {
    new Valine({
        el: '#vcomments',
        appId: 'Your appId',
        appKey: 'Your appKey'
    })
});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[美好的一天]]></title>
        <id>https://bemzhao.github.io/post/YQR7p-RtO/</id>
        <link href="https://bemzhao.github.io/post/YQR7p-RtO/">
        </link>
        <updated>2021-03-08T14:55:42.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="早晨">早晨</h2>
<p>原计划是起床之后来组keep醒一醒脑袋，没想到也有和我一样的小可爱愿意早起耕耘，为年轻的身体注入热情💪💪</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="早晨">早晨</h2>
<p>原计划是起床之后来组keep醒一醒脑袋，没想到也有和我一样的小可爱愿意早起耕耘，为年轻的身体注入热情💪💪</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://bemzhao.github.io/post-images/1615215404143.jpg" alt="" loading="lazy"></figure>
<p>想着独乐乐不如众乐乐，叫醒自己不如叫醒沿途中同样热爱青春的其他小可爱，只是没想到…<br>
🙃</p>
<figure data-type="image" tabindex="2"><img src="https://bemzhao.github.io/post-images/1615215460443.jpg" alt="" loading="lazy"></figure>
<p>只是更没想到…🙃🙃</p>
<figure data-type="image" tabindex="3"><img src="https://bemzhao.github.io/post-images/1615215481920.jpg" alt="" loading="lazy"></figure>
<p>清晨的小路上，空气格外的清新，还有一点雨后泥土的味道👍。晨跑的路线经过一片新开的楼盘，离坂田地铁站也不远，可能是因为这个原因吧，虽然是新开的楼盘但入住率蛮高的。周围还有一个湾畔mall，让我想起了曦悦湾畔，那里的入住率要是也能这么高就好了，不过也无所谓了，就当资产积累吧……</p>
<br/>
<br/>
<br/>
<h2 id="能与美好挂钩那当然是吃啦">能与美好挂钩那当然是吃啦</h2>
<p>回到小窝，叫醒女票一起买菜顺便做早餐</p>
<figure data-type="image" tabindex="4"><img src="https://bemzhao.github.io/post-images/1615215566422.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://bemzhao.github.io/post-images/1615215578319.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://bemzhao.github.io/post-images/1615215586824.jpg" alt="" loading="lazy"></figure>
<p>粗粮切片面包🍞夹生菜🌮带一个笨蛋<br>
以为能吃八百个<br>
结果一个就饱了，嗝~😎</p>
<br/>
<br/>
<br/>
<h2 id="还有一件事">还有一件事</h2>
<p>回想起每次跑步都觉得带个手机真心不方便，经过深入的讨论决定将Apple Watch 列入今年的计划中，支付、收发短信和电话，还能刷深圳通，理论上大部分时间都不需要将手机带在身上了</p>
<p>于是……</p>
<figure data-type="image" tabindex="7"><img src="https://bemzhao.github.io/post-images/1615215678762.jpg" alt="" loading="lazy"></figure>
<p>冲它！！！</p>
<p>直到我来到了益田假日广场……</p>
<figure data-type="image" tabindex="8"><img src="https://bemzhao.github.io/post-images/1615215703119.jpg" alt="" loading="lazy"></figure>
<p>再见您咧</p>
<p>虽然没有多早来，但也不觉得有多晚，以为能直接提现货，没想到乌鸡囊是如此之多，是在下输了</p>
<p>算了，就还是逛逛万象天地好了</p>
<figure data-type="image" tabindex="9"><img src="https://bemzhao.github.io/post-images/1615215725748.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://bemzhao.github.io/post-images/1615215734787.jpg" alt="" loading="lazy"></figure>
<p>回小窝自己煮饭吃</p>
<figure data-type="image" tabindex="11"><img src="https://bemzhao.github.io/post-images/1615215749961.jpg" alt="" loading="lazy"></figure>
<p>饭后散步</p>
<figure data-type="image" tabindex="12"><img src="https://bemzhao.github.io/post-images/1615215769542.jpg" alt="" loading="lazy"></figure>
<p>美好的一天，结束🛌🛌</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://bemzhao.github.io/post/hello-gridea/</id>
        <link href="https://bemzhao.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>